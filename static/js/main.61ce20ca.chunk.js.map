{"version":3,"sources":["types/Player.ts","types/Room.ts","services/Db.service.ts","services/DeviceData.service.ts","services/LocalStorage.service.ts","services/Rooms.service.ts","components/CreateOrJoinRoom.tsx","components/ProfileButton.tsx","components/Nav.tsx","components/UsernameForm.tsx","components/PlayerCard.tsx","components/PointPickerForm.tsx","components/PokerRoom.tsx","pages/PokerRoomPage.tsx","App.tsx","hooks/useDeviceData.ts","reportWebVitals.ts","index.tsx"],"names":["Player","name","flipped","value","Room","firstPlayerUsername","firstPlayerName","players","this","firebase","apps","length","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","DatabaseService","database","ref","child","localStorage","APP_NAME","key","setItem","getKey","JSON","stringify","stringifiedValue","getItem","parse","LOCAL_STORAGE_KEY","callbacks","getDeviceData","getAppStorage","setDeviceData","deviceData","newData","setAppStorage","forEach","callback","DeviceDataService","onChange","push","setName","userId","uuidv4","RoomsRef","RoomsService","createRoom","roomName","once","then","snapshot","rooms","val","roomId","shortid","generate","Error","Promise","resolve","reject","set","err","onRoomUpdate","on","addRoomPlayer","removeRoomPlayer","remove","updateRoomPlayer","updatedPlayer","update","flipAllRoomCards","currentRoom","Object","entries","player","resetAllRoomCards","CreateOrJoinRoom","useState","setRoomName","roomCode","setRoomCode","history","useHistory","navigateToRoom","onSubmit","e","preventDefault","htmlFor","className","id","type","placeholder","aria-label","target","newRoomCode","catch","console","log","ProfileButton","children","expanded","setExpanded","buttonRef","useRef","useEffect","foobar","current","window","addEventListener","removeEventListener","data-bs-toggle","aria-expanded","onClick","style","right","left","aria-labelledby","Nav","display","justifyContent","width","to","UsernameForm","PlayerCard","onRemovePlayer","currentUser","pulse","setPulse","timeoutId","setTimeout","clearTimeout","div","values","PointPickerForm","onExit","selectedPoints","setSelectedPoints","map","PokerRoom","room","handleRemovePlayer","sortedPlayers","sort","a","mode","filter","Number","stats","toString","calculateRoomMode","mean","calculateRoomMean","PokerRoomPage","useParams","setRoom","loading","setLoading","invalidRoom","setInvalidRoom","newRoomData","App","useDeviceData","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAAaA,EAIX,WAAmBC,GAAe,yBAAfA,OAAc,KAHjCC,SAAU,EAGuB,KAFjCC,MAAQ,I,gBCEGC,EAIX,WACSH,EACPI,EACAC,GACC,yBAHML,OAGP,KAPFC,SAAU,EAOR,KANFK,aAME,EACAC,KAAKD,QAAL,eAAkBF,EAAsB,IAAIL,EAAOM,K,kBCVlDG,IAASC,KAAKC,QACjBF,IAASG,cAAc,CACrBC,OAAQ,0CACRC,WAAY,gCACZC,YAAa,uCACbC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,eACnBC,MAAO,8CAIJ,IAAMC,EAAkBX,IAC5BY,WACAC,MACAC,MAAM,qB,wBCdHC,EAAe,ICJrB,WACE,WAAoBC,GAAmB,yBAAnBA,WADtB,0DAGgBC,EAAavB,GAEzB,OADAqB,aAAaG,QAAQnB,KAAKoB,OAAOF,GAAMG,KAAKC,UAAU3B,IAC/CA,IALX,oCAQgBuB,GACZ,IAAMK,EAAmBP,aAAaQ,QAAQxB,KAAKoB,OAAOF,IAC1D,OAAOK,GAAoBF,KAAKI,MAAMF,KAV1C,6BAaiBL,GACb,MAAM,GAAN,OAAUlB,KAAKiB,SAAf,YAA2BC,OAd/B,KDIqB,CAAyC,kBACxDQ,EAAoB,aAEpBC,EAAgC,GAEtC,SAASC,IACP,OAAOZ,EAAaa,cAAcH,GAGpC,SAASI,EAAcC,GACrB,IAAMC,EAAUhB,EAAaiB,cAAcP,EAAmBK,GAE9D,OADAJ,EAAUO,SAAQ,SAACC,GAAD,OAAcA,EAASH,MAClCA,EAeF,IAAMI,EAAoB,CAC/BR,gBACAE,gBACAO,SAfF,SAAkBF,GAChBR,EAAUW,KAAKH,IAefI,QAZF,SAAiB9C,GACfqC,EAAc,2BACTF,KADQ,IAEXnC,KAAMA,EACN+C,OAAO,GAAD,OAAKC,cAAL,YAAiBhD,QErBrBiD,EAAW9B,EAAgBG,MAAM,SAyEhC,IAAM4B,EAAe,CAC1BC,WAxEF,SAAoBC,GAClB,OAAOH,EAASI,KAAK,SAASC,MAAK,SAACC,GAClC,IAAMC,EAAQD,EAASE,OAAS,GAE1BC,EAASC,IAAQC,WACvB,GAAIF,KAAUF,EAEZ,MAAM,IAAIK,MAAM,+CAGlB,IAAMvB,EAAaK,EAAkBR,gBACrC,IAAKG,EACH,MAAM,IAAIuB,MAAM,0BAGlB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3Bf,EAAS3B,MAAMoC,GAAQO,IACrB,IAAI9D,EAAKiD,EAAUd,EAAWS,OAAQT,EAAWtC,OACjD,SAACkE,GACKA,EACFF,EAAOE,GAEPH,EAAQL,aAmDlBS,aA3CF,SAAsBT,EAAgBhB,GACpCO,EAAS3B,MAAMoC,GAAQU,GAAG,SAAS,SAACb,GAAD,OAAcb,EAASa,EAASE,WA2CnEY,cAxCF,SAAuBX,EAAgBX,EAAgB/C,GACrDiD,EAAS3B,MAAMoC,GAAQpC,MAAM,WAAWA,MAAMyB,GAAQkB,IAAI,IAAIlE,EAAOC,KAwCrEsE,iBArCF,SAA0BZ,EAAgBX,GACxCE,EAAS3B,MAAMoC,GAAQpC,MAAM,WAAWA,MAAMyB,GAAQwB,UAqCtDC,iBAlCF,SACEd,EACAX,EACA0B,GAEAxB,EAAS3B,MAAMoC,GAAQpC,MAAM,WAAWA,MAAMyB,GAAQ2B,OAAOD,IA8B7DE,iBA3BF,SAA0BjB,EAAgBkB,GACxC,IAAMtE,EAAUsE,EAAYtE,QAC5BuE,OAAOC,QAAQxE,GAASmC,SAAQ,YAAwB,IAAD,mBAAZsC,GAAY,WACjDA,EAAO7E,QACT6E,EAAO9E,SAAU,MAIrBgD,EAAS3B,MAAMoC,GAAQpC,MAAM,WAAWoD,OAAOpE,IAoB/C0E,kBAjBF,SAA2BtB,EAAgBkB,GACzC,IAAMtE,EAAUsE,EAAYtE,QAC5BuE,OAAOC,QAAQxE,GAASmC,SAAQ,YAAwB,IAAD,mBAAZsC,GAAY,WACrDA,EAAO7E,MAAQ,GACf6E,EAAO9E,SAAU,KAGnBgD,EAAS3B,MAAMoC,GAAQpC,MAAM,WAAWoD,OAAOpE,KCxEpC2E,EAA0C,WAAM,MAI3BC,mBAAS,IAJkB,mBAIpD9B,EAJoD,KAI1C+B,EAJ0C,OAK3BD,mBAAS,IALkB,mBAKpDE,EALoD,KAK1CC,EAL0C,KAMrDC,EAAUC,cA0BhB,SAASC,EAAeJ,GACtBE,EAAQzC,KAAR,iBAAuBuC,IAMzB,OACE,gCACE,uBAAMK,SAlBV,SAAkBC,GAChBA,EAAEC,iBACGP,GAILI,EAAeJ,IAYb,UACE,uBAAOQ,QAAQ,WAAf,wBACA,sBAAKC,UAAU,mBAAf,UACE,uBACEC,GAAG,WACHC,KAAK,OACLF,UAAU,eACVG,YAAY,YACZC,aAAW,YACXrD,SAAU,SAAC8C,GAAD,OAAOL,EAAYK,EAAEQ,OAAOhG,UAExC,qBAAK2F,UAAU,qBAAf,SACE,wBACEA,UAAU,0BACVE,KAAK,SACLD,GAAG,iBAHL,+BAWN,uBAAML,SArDV,SAAoBC,GAClBA,EAAEC,iBACFvC,GACEF,EAAaC,WAAWC,GACrBE,MAAK,SAAC6C,GACLX,EAAeW,MAEhBC,OAAM,SAAClC,GACNmC,QAAQC,IAAI,QAASpC,OA6CzB,UACE,uBAAO0B,QAAQ,WAAf,0BACA,sBAAKC,UAAU,mBAAf,UACE,uBACEC,GAAG,WACHC,KAAK,OACLF,UAAU,eACVG,YAAY,YACZC,aAAW,YACXrD,SAAU,SAAC8C,GAAD,OAAOP,EAAYO,EAAEQ,OAAOhG,UAExC,qBAAK2F,UAAU,qBAAf,SACE,wBACEC,GAAG,mBACHD,UAAU,4BACVE,KAAK,SAHP,qCC7ECQ,EAER,SAAC,GAA8B,IAA5BjE,EAA2B,EAA3BA,WAAYkE,EAAe,EAAfA,SAAe,EAIDtB,oBAAS,GAJR,mBAI1BuB,EAJ0B,KAIhBC,EAJgB,KAS3BC,EAAYC,iBAAO,MAiBzB,OAhBAC,qBAAU,WACR,SAASC,EAAOpB,GACVA,EAAEQ,SAAWS,EAAUI,SACzBL,GAAY,GAKhB,OAFAM,OAAOC,iBAAiB,QAASH,GAE1B,WACLE,OAAOE,oBAAoB,QAASJ,MAErC,IAMD,qBAAKjB,UAAU,YAAf,SACE,sBAAKA,UAAU,WAAf,UACE,yBACExE,IAAKsF,EACLd,UAAU,4CACVE,KAAK,SACLD,GAAG,oBACHG,aAAW,kBACXkB,iBAAe,WACfC,gBAAeX,EACfY,QAAS,kBAAMX,GAAaD,IAR9B,mBAUSnE,EAAWtC,KAVpB,OAYA,oBACE6F,UAAS,wBAAmBY,EAAW,OAAS,IAChDa,MAAO,CAAEC,MAAO,EAAGC,KAAM,QACzBC,kBAAgB,oBAHlB,SAKGjB,UC7CEkB,EAA4D,SAAC,GAEnE,IADLpF,EACI,EADJA,WAKMgD,EAAUC,cAahB,OACE,qBAAKM,UAAU,+BAAf,SACE,sBACEyB,MAAO,CACLK,QAAS,OACTC,eAAgB,gBAChBC,MAAO,QAJX,UAOE,cAAC,IAAD,CAAMhC,UAAU,eAAeiC,GAAG,IAAlC,4BAGCxF,GACC,cAAC,EAAD,CAAeA,WAAYA,EAA3B,SACE,6BACE,wBAAQuD,UAAU,gBAAgBwB,QAvB9C,WACE1E,EAAkBN,cAAc,MAChCiD,EAAQzC,KAAK,MAqBH,8BCtCDkF,EAER,SAAC,GAAkB,IAAhBtC,EAAe,EAAfA,SAAe,EAIGP,mBAAS,IAJZ,mBAIdlF,EAJc,KAIR8C,EAJQ,KAwBrB,OACE,gCACE,0DACA,sBAAM2C,SAdV,SAAsBC,GACpBA,EAAEC,iBACW,KAAT3F,GAGJyF,EAASzF,IASP,SACE,sBAAK6F,UAAU,WAAf,UACE,qBAAKA,UAAU,MAAf,SACE,uBACEE,KAAK,OACLC,YAAY,OACZF,GAAG,OACHD,UAAU,eACV3F,MAAOF,EACP4C,SA3BZ,SAA0B8C,GACxB5C,EAAQ4C,EAAEQ,OAAOhG,YA6BX,qBAAK2F,UAAU,WAAf,SACE,wBAAQE,KAAK,SAASF,UAAU,kBAAhC,+B,kBC7BL,IAAMmC,EAKR,SAAC,GAAqD,IAfxC/H,EAAkBC,EAe7B6C,EAAkD,EAAlDA,OAAQgC,EAA0C,EAA1CA,OAAQkD,EAAkC,EAAlCA,eAAgBC,EAAkB,EAAlBA,YAAkB,EAI9BhD,oBAAS,GAJqB,mBAIjDiD,EAJiD,KAI1CC,EAJ0C,KAuBxD,OAjBAvB,qBAAU,WACJ9B,EAAO7E,OACTkI,GAAS,GAEX,IAAMC,EAAYC,YAAW,WAC3BF,GAAS,KACR,KAEH,OAAO,WAELG,aAAaF,MAEd,CAACtD,EAAO7E,QAMT,qBAAK2F,UAAU,+BAAf,SACE,sBAAKA,UAAS,sBAAiBqC,IAAgBnF,EAAS,KAAO,IAA/D,UACE,qBAAK8C,UAAU,gBAAgBwB,QAAS,kBAAMY,EAAelF,IAA7D,oBAGA,sBAAK8C,UAAU,cAAf,UACE,8BAAMd,EAAO/E,OACb,gCAAQkI,IAAgBnF,EAAS,QAAU,QAE7C,cAAC,IAASyF,IAAV,CACE3C,UAAS,sBAAiBsC,EAAQ,QAAU,GAAnC,aAjDAlI,EAkDP8E,EAAO9E,QAlDkBC,EAmDzB6E,EAAO7E,MAlDZA,EAGAD,EAGE,UAFE,QAHA,UA8CH,SAME,8BAAM8E,EAAO9E,QAAU8E,EAAO7E,MAAQ,aCzD1CuI,EAAS,CAAC,IAAK,IAAK,MAAO,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,MAEnDC,EAGR,SAAC,GAA0B,IAAxBjD,EAAuB,EAAvBA,SAAUkD,EAAa,EAAbA,OAAa,EAIezD,mBAAS,IAJxB,mBAItB0D,EAJsB,KAINC,EAJM,KAwB7B,OACE,qBAAKhD,UAAU,OAAf,SACE,sBAAMJ,SAjBV,SAAsBC,GACpBA,EAAEC,iBACqB,KAAnBiD,GAGJnD,EAASmD,IAYP,SACE,sBAAK/C,UAAU,WAAf,UACE,qBAAKA,UAAU,WAAf,SACE,wBAAQE,KAAK,SAASF,UAAU,iBAAiBwB,QAASsB,EAA1D,yBAIF,qBAAK9C,UAAU,MAAf,SACE,yBACEC,GAAG,SACHD,UAAU,eACVjD,SApBZ,SAA2B8C,GACzBmD,EAAkBnD,EAAEQ,OAAOhG,QAgBnB,UAKE,wBAAQA,MAAM,GAAd,8BACCuI,EAAOK,KAAI,SAAC5I,GAAD,OACV,wBAAoBA,MAAOA,EAA3B,SACGA,GADUA,WAMnB,qBAAK2F,UAAU,WAAf,SACE,wBAAQE,KAAK,SAASF,UAAU,kBAAhC,8BC/CCkD,EAIR,SAAC,GAAkC,IAAhCrF,EAA+B,EAA/BA,OAAQsF,EAAuB,EAAvBA,KAAM1G,EAAiB,EAAjBA,WAIdgD,EAAUC,cAgBhB,SAAS0D,EAAmBlG,GAC1BG,EAAaoB,iBAAiBZ,EAAQX,GAZxC8D,qBAAU,WACR3D,EAAamB,cAAcX,EAAQpB,EAAWS,OAAQT,EAAWtC,QAChE,CAAC0D,EAAQpB,IA+BZ,IAAM4G,EAAgBrE,OAAOC,QAAQkE,EAAK1I,SAAS6I,MAAK,cAAe,IAAbC,EAAY,wCACpE,OAAIA,IAAM9G,EAAWS,QACX,EAED,KAILsG,EX7CD,SAA2B/I,GAChC,IAAMmI,EAAS5D,OAAOC,QAAQxE,GAC3BwI,KAAI,uDACJQ,QAAO,SAACvE,GAAD,OAAYA,EAAO9E,WAC1B6I,KAAI,SAAC/D,GAAD,OAAYwE,OAAOxE,EAAO7E,UAEjC,OAAsB,IAAlBuI,EAAO/H,OACF,GAGF8I,OAAWf,GAAQgB,WWmCbC,CAAkBV,EAAK1I,SAC9BqJ,EXjCD,SAA2BrJ,GAChC,IAAMmI,EAAS5D,OAAOC,QAAQxE,GAC3BwI,KAAI,uDACJQ,QAAO,SAACvE,GAAD,OAAYA,EAAO9E,WAC1B6I,KAAI,SAAC/D,GAAD,OAAYwE,OAAOxE,EAAO7E,UAEjC,OAAsB,IAAlBuI,EAAO/H,OACF,GAGF8I,OAAWf,GAAQgB,WWuBbG,CAAkBZ,EAAK1I,SAEpC,OACE,gCACE,gCACE,qDADF,IACoC0I,EAAKhJ,QAEzC,sBAAK6F,UAAU,OAAf,UACE,gDADF,IAC+BnC,KAE/B,qBAAKmC,UAAU,OAAf,SACE,cAAC,EAAD,CACEJ,SAvCR,SAA2BmD,GACzB1F,EAAasB,iBAAiBd,EAAQpB,EAAWS,OAAQ,CACvD7C,MAAO0I,EACP3I,SAAS,KAqCL0I,OAhDR,WACErD,EAAQzC,KAAK,UAkDX,sBAAKgD,UAAU,mBAAf,UACE,wBACEE,KAAK,SACLF,UAAU,uBACVwB,QAxCR,WACEnE,EAAayB,iBAAiBjB,EAAQsF,IAoClC,4BAOA,wBACEjD,KAAK,SACLF,UAAU,oBACVwB,QA3CR,WACEnE,EAAa8B,kBAAkBtB,EAAQsF,IAuCnC,sBASF,sBAAKnD,UAAU,mBAAf,mBACSwD,EADT,aACyBM,KAGzB,qBAAK9D,UAAU,MAAf,SACGqD,EAAcJ,KAAI,mCAAE/F,EAAF,KAAUgC,EAAV,YACjB,cAAC,EAAD,CAEEhC,OAAQA,EACRmF,YAAa5F,EAAWS,OACxBgC,OAAQA,EACRkD,eAAgBgB,GAJXlG,YChGJ8G,EAA+D,SAAC,GAEtE,IADLvH,EACI,EADJA,WAKQoB,EAAWoG,cAAXpG,OAJJ,EAKoBwB,mBAAsB,MAL1C,mBAKG8D,EALH,KAKSe,EALT,OAM0B7E,oBAAS,GANnC,mBAMG8E,EANH,KAMYC,EANZ,OAOkC/E,oBAAS,GAP3C,mBAOGgF,EAPH,KAOgBC,EAPhB,KAkCJ,OAtBAtD,qBAAU,WACRoD,GAAW,GACX/G,EAAaiB,aAAaT,GAAQ,SAAC0G,GACjCH,GAAW,GACX5D,QAAQC,IAAI,gBAAiB8D,GAEzBA,GACFD,GAAe,GACfJ,EAAQK,IAERD,GAAe,QAGlB,CAACzG,IASAsG,EACK,6CACEE,IAAgBlB,EAClB,iDAGL,cAAC,EAAD,CACEtF,OAAQA,EACRsF,KAAMA,EACN1G,WAAYA,KCNL+H,MAtCf,WAAe,MCJR,WAAqE,IAAD,EACrCnF,mBAClCvC,EAAkBR,iBAFqD,mBAClEG,EADkE,KACtDD,EADsD,KAqBzE,OAbAwE,qBAAU,WACRlE,EAAkBC,UAAS,SAACN,GAC1BD,EAAcC,QAEf,IASI,CAACA,EAJR,SAAiBtC,GACf2C,EAAkBG,QAAQ9C,KDNEsK,GARjB,mBAQNhI,EARM,KAQMQ,EARN,KAiBb,OACE,eAAC,IAAD,WACE,cAAC,EAAD,CAAKR,WAAYA,IACjB,qBAAKuD,UAAU,sBAAf,SACGvD,EACC,eAAC,IAAD,WACE,cAAC,IAAD,CAAOiI,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,iBAAZ,SACE,cAAC,EAAD,CAAelI,WAAYA,SAI/B,cAAC,EAAD,CAAcmD,SAAU3C,UEzBnB2H,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBrH,MAAK,YAAkD,IAA/CsH,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAO1BZ,M","file":"static/js/main.61ce20ca.chunk.js","sourcesContent":["export class Player {\n  flipped = false;\n  value = '';\n\n  constructor(public name: string) {}\n}\n","import { Player } from './Player';\nimport * as stats from 'stats-lite';\n\nexport type RoomPlayers = { [key: string]: Player };\nexport class Room {\n  flipped = false;\n  players: RoomPlayers;\n\n  constructor(\n    public name: string,\n    firstPlayerUsername: string,\n    firstPlayerName: string\n  ) {\n    this.players = { [firstPlayerUsername]: new Player(firstPlayerName) };\n  }\n}\n\nexport function calculateRoomMode(players: RoomPlayers): string {\n  const values = Object.entries(players)\n    .map(([_key, players]) => players)\n    .filter((player) => player.flipped)\n    .map((player) => Number(player.value));\n\n  if (values.length === 0) {\n    return '';\n  }\n\n  return stats.mode(values).toString();\n}\n\nexport function calculateRoomMean(players: RoomPlayers): string {\n  const values = Object.entries(players)\n    .map(([_key, players]) => players)\n    .filter((player) => player.flipped)\n    .map((player) => Number(player.value));\n\n  if (values.length === 0) {\n    return '';\n  }\n\n  return stats.mean(values).toString();\n}\n","import firebase from 'firebase/app';\nimport 'firebase/database';\n\nif (!firebase.apps.length) {\n  firebase.initializeApp({\n    apiKey: 'AIzaSyCbCXKvaOhPnqcgEjhESuo9IjCLbvyx8GA',\n    authDomain: 'testing-7bdba.firebaseapp.com',\n    databaseURL: 'https://testing-7bdba.firebaseio.com',\n    projectId: 'testing-7bdba',\n    storageBucket: 'testing-7bdba.appspot.com',\n    messagingSenderId: '123433442681',\n    appId: '1:123433442681:web:e2576007bf4485162ca3a8',\n  });\n}\n\nexport const DatabaseService = firebase\n  .database()\n  .ref()\n  .child('planning-poker-v2');\n","import { v4 as uuidv4 } from 'uuid';\nimport { MaybeDeviceData } from '../types/DeviceData.interface';\nimport { LocalStorageService } from './LocalStorage.service';\n\nconst localStorage = new LocalStorageService<MaybeDeviceData>('PLANNING_POKER');\nconst LOCAL_STORAGE_KEY = 'deviceData';\ntype OnChangeCallback = (deviceData: MaybeDeviceData) => void;\nconst callbacks: OnChangeCallback[] = [];\n\nfunction getDeviceData(): MaybeDeviceData {\n  return localStorage.getAppStorage(LOCAL_STORAGE_KEY);\n}\n\nfunction setDeviceData(deviceData: MaybeDeviceData): MaybeDeviceData {\n  const newData = localStorage.setAppStorage(LOCAL_STORAGE_KEY, deviceData);\n  callbacks.forEach((callback) => callback(newData));\n  return newData;\n}\n\nfunction onChange(callback: OnChangeCallback) {\n  callbacks.push(callback);\n}\n\nfunction setName(name: string): void {\n  setDeviceData({\n    ...getDeviceData(),\n    name: name,\n    userId: `${uuidv4()}_${name}`,\n  });\n}\n\nexport const DeviceDataService = {\n  getDeviceData,\n  setDeviceData,\n  onChange,\n  setName,\n};\n","export class LocalStorageService<T> {\n  constructor(private APP_NAME: string) {}\n\n  setAppStorage(key: string, value: T) {\n    localStorage.setItem(this.getKey(key), JSON.stringify(value));\n    return value;\n  }\n\n  getAppStorage(key: string): T {\n    const stringifiedValue = localStorage.getItem(this.getKey(key));\n    return stringifiedValue && JSON.parse(stringifiedValue);\n  }\n\n  private getKey(key: string): string {\n    return `${this.APP_NAME}.${key}`;\n  }\n}\n","import shortid from 'shortid';\nimport { Player } from '../types/Player';\nimport { Room } from '../types/Room';\nimport { DatabaseService } from './Db.service';\nimport { DeviceDataService } from './DeviceData.service';\n\nconst RoomsRef = DatabaseService.child('rooms');\n\nfunction createRoom(roomName: string): Promise<string> {\n  return RoomsRef.once('value').then((snapshot) => {\n    const rooms = snapshot.val() || {};\n\n    const roomId = shortid.generate();\n    if (roomId in rooms) {\n      // try a couple times?\n      throw new Error('couldnt create new room b/c of id collision');\n    }\n\n    const deviceData = DeviceDataService.getDeviceData();\n    if (!deviceData) {\n      throw new Error('deviceData not defined');\n    }\n\n    return new Promise((resolve, reject) => {\n      RoomsRef.child(roomId).set(\n        new Room(roomName, deviceData.userId, deviceData.name),\n        (err) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(roomId);\n          }\n        }\n      );\n    });\n  });\n}\n\nfunction onRoomUpdate(roomId: string, callback: (room: Room | null) => void) {\n  RoomsRef.child(roomId).on('value', (snapshot) => callback(snapshot.val()));\n}\n\nfunction addRoomPlayer(roomId: string, userId: string, name: string) {\n  RoomsRef.child(roomId).child('players').child(userId).set(new Player(name));\n}\n\nfunction removeRoomPlayer(roomId: string, userId: string) {\n  RoomsRef.child(roomId).child('players').child(userId).remove();\n}\n\nfunction updateRoomPlayer(\n  roomId: string,\n  userId: string,\n  updatedPlayer: Partial<Player>\n) {\n  RoomsRef.child(roomId).child('players').child(userId).update(updatedPlayer);\n}\n\nfunction flipAllRoomCards(roomId: string, currentRoom: Room) {\n  const players = currentRoom.players;\n  Object.entries(players).forEach(([_userId, player]) => {\n    if (player.value) {\n      player.flipped = true;\n    }\n  });\n\n  RoomsRef.child(roomId).child('players').update(players);\n}\n\nfunction resetAllRoomCards(roomId: string, currentRoom: Room) {\n  const players = currentRoom.players;\n  Object.entries(players).forEach(([_userId, player]) => {\n    player.value = '';\n    player.flipped = false;\n  });\n\n  RoomsRef.child(roomId).child('players').update(players);\n}\n\nexport const RoomsService = {\n  createRoom,\n  onRoomUpdate,\n  addRoomPlayer,\n  removeRoomPlayer,\n  updateRoomPlayer,\n  flipAllRoomCards,\n  resetAllRoomCards,\n};\n","import { FunctionComponent, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { RoomsService } from '../services/Rooms.service';\n\nexport const CreateOrJoinRoom: FunctionComponent<{}> = () => {\n  // ----------------------------------------\n  // state\n  // ----------------------------------------\n  const [roomName, setRoomName] = useState('');\n  const [roomCode, setRoomCode] = useState('');\n  const history = useHistory();\n\n  // ----------------------------------------\n  // helper functions\n  // ----------------------------------------\n  function createRoom(e: React.FormEvent) {\n    e.preventDefault();\n    roomName &&\n      RoomsService.createRoom(roomName)\n        .then((newRoomCode) => {\n          navigateToRoom(newRoomCode);\n        })\n        .catch((err) => {\n          console.log('err =', err);\n        });\n  }\n\n  function joinRoom(e: React.FormEvent) {\n    e.preventDefault();\n    if (!roomCode) {\n      return;\n    }\n\n    navigateToRoom(roomCode);\n  }\n\n  function navigateToRoom(roomCode: string) {\n    history.push(`/rooms/${roomCode}`);\n  }\n\n  // ----------------------------------------\n  // render\n  // ----------------------------------------\n  return (\n    <div>\n      <form onSubmit={joinRoom}>\n        <label htmlFor=\"roomCode\">Join Room:</label>\n        <div className=\"input-group mb-3\">\n          <input\n            id=\"roomCode\"\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Room Code\"\n            aria-label=\"Room Code\"\n            onChange={(e) => setRoomCode(e.target.value)}\n          />\n          <div className=\"input-group-append\">\n            <button\n              className=\"btn btn-outline-primary\"\n              type=\"submit\"\n              id=\"joinRoomButton\"\n            >\n              Join Room\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <form onSubmit={createRoom}>\n        <label htmlFor=\"roomName\">Create Room:</label>\n        <div className=\"input-group mb-3\">\n          <input\n            id=\"roomName\"\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Room Name\"\n            aria-label=\"Room Name\"\n            onChange={(e) => setRoomName(e.target.value)}\n          />\n          <div className=\"input-group-append\">\n            <button\n              id=\"createRoomButton\"\n              className=\"btn btn-outline-secondary\"\n              type=\"submit\"\n            >\n              Create Room\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n","import React, { FunctionComponent, useEffect, useRef, useState } from 'react';\nimport { DeviceData } from '../types/DeviceData.interface';\n\nexport const ProfileButton: FunctionComponent<{\n  deviceData: DeviceData;\n}> = ({ deviceData, children }) => {\n  // ----------------------------------------\n  // state\n  // ----------------------------------------\n  const [expanded, setExpanded] = useState(false);\n\n  // ----------------------------------------\n  // effects\n  // ----------------------------------------\n  const buttonRef = useRef(null);\n  useEffect(() => {\n    function foobar(e: MouseEvent) {\n      if (e.target !== buttonRef.current) {\n        setExpanded(false);\n      }\n    }\n    window.addEventListener('click', foobar);\n\n    return function cleanup() {\n      window.removeEventListener('click', foobar);\n    };\n  }, []);\n\n  // ----------------------------------------\n  // render\n  // ----------------------------------------\n  return (\n    <div className=\"btn-group\">\n      <div className=\"dropdown\">\n        <button\n          ref={buttonRef}\n          className=\"btn btn-outline-secondary dropdown-toggle\"\n          type=\"button\"\n          id=\"profileMenuButton\"\n          aria-label=\"Profile Options\"\n          data-bs-toggle=\"dropdown\"\n          aria-expanded={expanded}\n          onClick={() => setExpanded(!expanded)}\n        >\n          Hello {deviceData.name}!\n        </button>\n        <ul\n          className={`dropdown-menu ${expanded ? 'show' : ''}`}\n          style={{ right: 0, left: 'auto' }}\n          aria-labelledby=\"profileMenuButton\"\n        >\n          {children}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { FunctionComponent } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { DeviceDataService } from '../services/DeviceData.service';\nimport { DeviceData } from '../types/DeviceData.interface';\nimport { ProfileButton } from './ProfileButton';\n\nexport const Nav: FunctionComponent<{ deviceData: DeviceData | null }> = ({\n  deviceData,\n}) => {\n  // ----------------------------------------\n  // state\n  // ----------------------------------------\n  const history = useHistory();\n\n  // ----------------------------------------\n  // helper functions\n  // ----------------------------------------\n  function logout() {\n    DeviceDataService.setDeviceData(null);\n    history.push('/');\n  }\n\n  // ----------------------------------------\n  // render\n  // ----------------------------------------\n  return (\n    <nav className=\"navbar navbar-light bg-light\">\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'space-between',\n          width: '100%',\n        }}\n      >\n        <Link className=\"navbar-brand\" to=\"/\">\n          Planning Poker\n        </Link>\n        {deviceData && (\n          <ProfileButton deviceData={deviceData}>\n            <li>\n              <button className=\"dropdown-item\" onClick={logout}>\n                Logout\n              </button>\n            </li>\n          </ProfileButton>\n        )}\n      </div>\n    </nav>\n  );\n};\n","import React, { FunctionComponent, useState } from 'react';\n\nexport const UsernameForm: FunctionComponent<{\n  onSubmit: (name: string) => void;\n}> = ({ onSubmit }) => {\n  // ----------------------------------------\n  // State\n  // ----------------------------------------\n  const [name, setName] = useState('');\n\n  // ----------------------------------------\n  // helper functions\n  // ----------------------------------------\n  function handleNameChange(e: React.ChangeEvent<HTMLInputElement>) {\n    setName(e.target.value);\n  }\n\n  function handleSubmit(e: React.FormEvent) {\n    e.preventDefault();\n    if (name === '') {\n      return;\n    }\n    onSubmit(name);\n  }\n\n  // ----------------------------------------\n  // Render\n  // ----------------------------------------\n  return (\n    <div>\n      <div>Please enter your name:</div>\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-row\">\n          <div className=\"col\">\n            <input\n              type=\"text\"\n              placeholder=\"Name\"\n              id=\"name\"\n              className=\"form-control\"\n              value={name}\n              onChange={handleNameChange}\n            />\n          </div>\n          <div className=\"col-auto\">\n            <button type=\"submit\" className=\"btn btn-primary\">\n              Submit\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n","import { useState, useEffect, FunctionComponent } from 'react';\nimport './PlayerCard.css';\nimport { animated } from 'react-spring';\nimport { Player } from '../types/Player';\n\nfunction cardClass(flipped: boolean, value: string) {\n  if (!value) {\n    return 'empty';\n  }\n  if (!flipped) {\n    return 'ready';\n  }\n  return 'flipped';\n}\n\nexport const PlayerCard: FunctionComponent<{\n  userId: string;\n  currentUser: string;\n  player: Player;\n  onRemovePlayer: (userId: string) => void;\n}> = ({ userId, player, onRemovePlayer, currentUser }) => {\n  // ----------------------------------------\n  // state\n  // ----------------------------------------\n  const [pulse, setPulse] = useState(false);\n\n  useEffect(() => {\n    if (player.value) {\n      setPulse(true);\n    }\n    const timeoutId = setTimeout(() => {\n      setPulse(false);\n    }, 1000);\n\n    return () => {\n      // Clean up the timeout\n      clearTimeout(timeoutId);\n    };\n  }, [player.value]);\n\n  // ----------------------------------------\n  // render\n  // ----------------------------------------\n  return (\n    <div className=\"col-6 col-sm-4 col-md-3 mb-3\">\n      <div className={`player-tile ${currentUser === userId ? 'me' : ''}`}>\n        <div className=\"player-remove\" onClick={() => onRemovePlayer(userId)}>\n          ✕\n        </div>\n        <div className=\"player-name\">\n          <div>{player.name}</div>\n          <small>{currentUser === userId ? '(you)' : ''}</small>\n        </div>\n        <animated.div\n          className={`player-card ${pulse ? 'pulse' : ''} ${cardClass(\n            player.flipped,\n            player.value\n          )}`}\n        >\n          <div>{player.flipped ? player.value : ''}</div>\n        </animated.div>\n      </div>\n    </div>\n  );\n};\n","import React, { FunctionComponent, useState } from 'react';\n\nconst values = ['?', '0', '0.5', '1', '2', '3', '5', '8', '13', '21'];\n\nexport const PointPickerForm: FunctionComponent<{\n  onSubmit: (selectedPoints: string) => void;\n  onExit: () => void;\n}> = ({ onSubmit, onExit }) => {\n  // ----------------------------------------\n  // state\n  // ----------------------------------------\n  const [selectedPoints, setSelectedPoints] = useState('');\n\n  // ----------------------------------------\n  // helper functions\n  // ----------------------------------------\n  function handleSubmit(e: React.FormEvent) {\n    e.preventDefault();\n    if (selectedPoints === '') {\n      return;\n    }\n    onSubmit(selectedPoints);\n  }\n\n  function handlePointChange(e: React.ChangeEvent<HTMLSelectElement>) {\n    setSelectedPoints(e.target.value);\n  }\n\n  // ----------------------------------------\n  // render\n  // ----------------------------------------\n  return (\n    <div className=\"mb-3\">\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-row\">\n          <div className=\"col-auto\">\n            <button type=\"button\" className=\"btn btn-danger\" onClick={onExit}>\n              Exit Room\n            </button>\n          </div>\n          <div className=\"col\">\n            <select\n              id=\"points\"\n              className=\"form-control\"\n              onChange={handlePointChange}\n            >\n              <option value=\"\">Pick your points</option>\n              {values.map((value) => (\n                <option key={value} value={value}>\n                  {value}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div className=\"col-auto\">\n            <button type=\"submit\" className=\"btn btn-primary\">\n              Submit\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n","import React, { FunctionComponent, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { RoomsService } from '../services/Rooms.service';\nimport { DeviceData } from '../types/DeviceData.interface';\nimport { calculateRoomMean, calculateRoomMode, Room } from '../types/Room';\nimport { PlayerCard } from './PlayerCard';\nimport { PointPickerForm } from './PointPickerForm';\n\nexport const PokerRoom: FunctionComponent<{\n  roomId: string;\n  room: Room;\n  deviceData: DeviceData;\n}> = ({ roomId, room, deviceData }) => {\n  // ----------------------------------------\n  // constants\n  // ----------------------------------------\n  const history = useHistory();\n\n  // ----------------------------------------\n  // effects\n  // ----------------------------------------\n  useEffect(() => {\n    RoomsService.addRoomPlayer(roomId, deviceData.userId, deviceData.name);\n  }, [roomId, deviceData]);\n\n  // ----------------------------------------\n  // helper functions\n  // ----------------------------------------\n  function handleExit() {\n    history.push('/');\n  }\n\n  function handleRemovePlayer(userId: string) {\n    RoomsService.removeRoomPlayer(roomId, userId);\n  }\n\n  function handlePointSubmit(selectedPoints: string) {\n    RoomsService.updateRoomPlayer(roomId, deviceData.userId, {\n      value: selectedPoints,\n      flipped: false,\n    });\n  }\n\n  function handleFlipAllCards() {\n    RoomsService.flipAllRoomCards(roomId, room);\n  }\n\n  function handleResetCards() {\n    RoomsService.resetAllRoomCards(roomId, room);\n  }\n\n  // ----------------------------------------\n  // render\n  // ----------------------------------------\n  const sortedPlayers = Object.entries(room.players).sort(([a], [b]) => {\n    if (a === deviceData.userId) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n\n  const mode = calculateRoomMode(room.players);\n  const mean = calculateRoomMean(room.players);\n\n  return (\n    <div>\n      <div>\n        <strong>You're in room:</strong> {room.name}\n      </div>\n      <div className=\"mb-2\">\n        <strong>Room code:</strong> {roomId}\n      </div>\n      <div className=\"mb-2\">\n        <PointPickerForm\n          onSubmit={handlePointSubmit}\n          onExit={handleExit}\n        ></PointPickerForm>\n      </div>\n      <div className=\"mb-3 text-center\">\n        <button\n          type=\"button\"\n          className=\"btn btn-success mr-3\"\n          onClick={handleFlipAllCards}\n        >\n          Flip all cards\n        </button>\n        <button\n          type=\"button\"\n          className=\"btn btn-secondary\"\n          onClick={handleResetCards}\n        >\n          Reset\n        </button>\n      </div>\n\n      <div className=\"text-center mb-3\">\n        Mode: {mode} | Mean : {mean}\n      </div>\n\n      <div className=\"row\">\n        {sortedPlayers.map(([userId, player]) => (\n          <PlayerCard\n            key={userId}\n            userId={userId}\n            currentUser={deviceData.userId}\n            player={player}\n            onRemovePlayer={handleRemovePlayer}\n          ></PlayerCard>\n        ))}\n      </div>\n\n      {/* <pre>{JSON.stringify(room, null, 2)}</pre> */}\n    </div>\n  );\n};\n","import { FunctionComponent, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { RoomsService } from '../services/Rooms.service';\nimport { DeviceData } from '../types/DeviceData.interface';\nimport { Room } from '../types/Room';\nimport { PokerRoom } from '../components/PokerRoom';\n\nexport const PokerRoomPage: FunctionComponent<{ deviceData: DeviceData }> = ({\n  deviceData,\n}) => {\n  // ----------------------------------------\n  // state\n  // ----------------------------------------\n  const { roomId } = useParams<{ roomId: string }>();\n  const [room, setRoom] = useState<Room | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [invalidRoom, setInvalidRoom] = useState(false);\n\n  // ----------------------------------------\n  // effects\n  // ----------------------------------------\n  useEffect(() => {\n    setLoading(true);\n    RoomsService.onRoomUpdate(roomId, (newRoomData) => {\n      setLoading(false);\n      console.log('newRoomData =', newRoomData);\n\n      if (newRoomData) {\n        setInvalidRoom(false);\n        setRoom(newRoomData);\n      } else {\n        setInvalidRoom(true);\n      }\n    });\n  }, [roomId]);\n\n  // ----------------------------------------\n  // helper functions\n  // ----------------------------------------\n\n  // ----------------------------------------\n  // render\n  // ----------------------------------------\n  if (loading) {\n    return <div>Loading...</div>;\n  } else if (invalidRoom || !room) {\n    return <div>Room Not Found</div>;\n  } else {\n    return (\n      <PokerRoom\n        roomId={roomId}\n        room={room}\n        deviceData={deviceData}\n      ></PokerRoom>\n    );\n  }\n};\n","import { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport { CreateOrJoinRoom } from './components/CreateOrJoinRoom';\nimport { Nav } from './components/Nav';\nimport { UsernameForm } from './components/UsernameForm';\nimport { useDeviceData } from './hooks/useDeviceData';\nimport { PokerRoomPage } from './pages/PokerRoomPage';\n\nfunction App() {\n  // ----------------------------------------\n  // state\n  // ----------------------------------------\n\n  // ----------------------------------------\n  // effects\n  // ----------------------------------------\n  const [deviceData, setName] = useDeviceData();\n\n  // ----------------------------------------\n  // helper functions\n  // ----------------------------------------\n\n  // ----------------------------------------\n  // render\n  // ----------------------------------------\n  return (\n    <Router>\n      <Nav deviceData={deviceData}></Nav>\n      <div className=\"container mt-3 mb-3\">\n        {deviceData ? (\n          <Switch>\n            <Route exact path=\"/\">\n              <CreateOrJoinRoom></CreateOrJoinRoom>\n            </Route>\n            <Route path=\"/rooms/:roomId\">\n              <PokerRoomPage deviceData={deviceData}></PokerRoomPage>\n            </Route>\n          </Switch>\n        ) : (\n          <UsernameForm onSubmit={setName} />\n        )}\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from 'react';\nimport { DeviceDataService } from '../services/DeviceData.service';\nimport { MaybeDeviceData } from '../types/DeviceData.interface';\n\nexport function useDeviceData(): [MaybeDeviceData, (name: string) => void] {\n  const [deviceData, setDeviceData] = useState<MaybeDeviceData>(\n    DeviceDataService.getDeviceData()\n  );\n\n  // ----------------------------------------\n  // effects\n  // ----------------------------------------\n  useEffect(() => {\n    DeviceDataService.onChange((deviceData) => {\n      setDeviceData(deviceData);\n    });\n  }, []);\n\n  // ----------------------------------------\n  // helper functions\n  // ----------------------------------------\n  function setName(name: string) {\n    DeviceDataService.setName(name);\n  }\n\n  return [deviceData, setName];\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log);\nreportWebVitals();\n"],"sourceRoot":""}